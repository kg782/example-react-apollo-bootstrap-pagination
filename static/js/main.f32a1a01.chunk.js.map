{"version":3,"sources":["components/ImageRow.tsx","components/PaginationItem.tsx","hooks/useDebounce.ts","App.tsx","configs.ts","reportWebVitals.ts","index.tsx"],"names":["ImageRow","photo","onSelect","handleClick","useCallback","onClick","id","title","Image","src","thumbnailUrl","rounded","fluid","PaginationItem","page","active","Pagination","Item","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","GET_PHOTOS_QUERY","gql","App","q","setQ","setPage","selectedPhoto","setSelectedPhoto","debouncedQ","useQuery","variables","limit","loading","error","data","handleQueryChange","event","target","handleSelectPhoto","handleModalHide","handleFirstClick","lastPage","photos","meta","totalCount","Math","ceil","handleLastClick","handlePrevClick","handleNextClick","Container","className","Form","as","Row","Group","controlId","Col","Control","type","placeholder","onChange","Table","striped","bordered","hover","map","Spinner","animation","role","First","disabled","Prev","range","max","min","p","Next","Last","Modal","show","onHide","Header","closeButton","Body","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f32a1a01.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport Image from 'react-bootstrap/Image';\nimport { Photo } from '../App';\n\ntype ImageRowProps = {\n  photo: Photo;\n  onSelect: (photo: Photo) => void;\n};\n\nfunction ImageRow({ photo, onSelect }: ImageRowProps) {\n  const handleClick = useCallback(() => onSelect(photo), [onSelect, photo]);\n\n  return (\n    <tr onClick={handleClick}>\n      <td>{photo.id}</td>\n      <td>{photo.title}</td>\n      <td>\n        <Image src={photo.thumbnailUrl} rounded fluid />\n      </td>\n    </tr>\n  );\n}\n\nexport default ImageRow;\n","import React, { useCallback } from 'react';\nimport Pagination from 'react-bootstrap/Pagination';\n\ninterface PaginationItemProps {\n  page: number;\n  active: boolean;\n  onSelect: (page: number) => void;\n}\n\nfunction PaginationItem({ page, active, onSelect }: PaginationItemProps) {\n  const handleClick = useCallback(() => onSelect(page), [page, onSelect]);\n\n  return (\n    <Pagination.Item key={page} active={active} onClick={handleClick}>\n      {page}\n    </Pagination.Item>\n  );\n}\n\nexport default PaginationItem;\n","import { useEffect, useState } from \"react\";\n\nfunction useDebounce<T>(value:T, delay: number = 500) : T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay]\n  );\n\n  return debouncedValue;\n}\n\nexport default useDebounce;","import React, { useCallback, useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Modal from 'react-bootstrap/Modal';\nimport Image from 'react-bootstrap/Image';\nimport Spinner from 'react-bootstrap/Spinner';\nimport range from 'lodash/fp/range';\nimport ImageRow from './components/ImageRow';\nimport { LIST_LIMIT } from './configs';\nimport PaginationItem from './components/PaginationItem';\nimport useDebounce from './hooks/useDebounce';\n\nexport interface Photo {\n  id: number;\n  title: string;\n  url: string;\n  thumbnailUrl: string;\n}\n\nexport interface PhotosData {\n  photos: {\n    data: Photo[];\n    meta: {\n      totalCount: number;\n    };\n  };\n}\n\nexport interface PhotosVars {\n  q: string;\n  page: number;\n  limit: number;\n}\n\nexport const GET_PHOTOS_QUERY = gql`\n  query Photos($q: String, $page: Int, $limit: Int) {\n    photos(\n      options: { paginate: { page: $page, limit: $limit }, search: { q: $q } }\n    ) {\n      data {\n        id\n        title\n        url\n        thumbnailUrl\n      }\n      meta {\n        totalCount\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [q, setQ] = useState<string>('');\n  const [page, setPage] = useState<number>(1);\n  const [selectedPhoto, setSelectedPhoto] = useState<Photo | null>(null);\n  const debouncedQ: string = useDebounce<string>(q, 500);\n  const { loading, error, data } = useQuery<PhotosData, PhotosVars>(\n    GET_PHOTOS_QUERY,\n    {\n      variables: {\n        q: debouncedQ,\n        page,\n        limit: LIST_LIMIT,\n      },\n    }\n  );\n  const handleQueryChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQ(event.target.value);\n      setPage(1);\n    },\n    [setQ, setPage]\n  );\n  const handleSelectPhoto = useCallback(\n    (photo: Photo) => setSelectedPhoto(photo),\n    [setSelectedPhoto]\n  );\n  const handleModalHide = useCallback(() => setSelectedPhoto(null), [\n    setSelectedPhoto,\n  ]);\n  const handleFirstClick = useCallback(() => setPage(1), [setPage]);\n  const lastPage: number = data?.photos?.meta?.totalCount\n    ? Math.ceil(data?.photos?.meta?.totalCount / LIST_LIMIT)\n    : 0;\n  const handleLastClick = useCallback(() => setPage(lastPage), [\n    setPage,\n    lastPage,\n  ]);\n  const handlePrevClick = useCallback(() => setPage(page - 1), [setPage, page]);\n  const handleNextClick = useCallback(() => setPage(page + 1), [setPage, page]);\n\n  if (error) return <p>Error</p>;\n\n  return (\n    <div>\n      <Container className=\"mt-5\">\n        <Form as={Row}>\n          <Form.Group controlId=\"search\" as={Col}>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Search keywords on title\"\n              value={q}\n              onChange={handleQueryChange}\n            />\n          </Form.Group>\n        </Form>\n        <Table striped bordered hover as={Row}>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Title</th>\n              <th>Thumbnail</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data?.photos?.data &&\n              data.photos.data.map((photo) => (\n                <ImageRow\n                  key={photo.id}\n                  photo={photo}\n                  onSelect={handleSelectPhoto}\n                />\n              ))}\n          </tbody>\n        </Table>\n        {loading && (\n          <Row>\n            <Col>\n              <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col className=\"clearfix\">\n            {data?.photos?.meta?.totalCount ? (\n              <Pagination className=\"float-right\">\n                <Pagination.First\n                  onClick={handleFirstClick}\n                  disabled={page === 1}\n                />\n                <Pagination.Prev\n                  onClick={handlePrevClick}\n                  disabled={page === 1}\n                />\n                {range(\n                  Math.max(1, page - 2),\n                  Math.min(lastPage + 1, page + 3)\n                ).map((p) => (\n                  <PaginationItem\n                    key={p}\n                    page={p}\n                    active={p === page}\n                    onSelect={setPage}\n                  />\n                ))}\n                <Pagination.Next\n                  onClick={handleNextClick}\n                  disabled={page === lastPage}\n                />\n                <Pagination.Last\n                  onClick={handleLastClick}\n                  disabled={page === lastPage}\n                />\n              </Pagination>\n            ) : null}\n          </Col>\n        </Row>\n      </Container>\n      <Modal show={!!selectedPhoto} onHide={handleModalHide} animation={false}>\n        <Modal.Header closeButton />\n        <Modal.Body>\n          <Image src={selectedPhoto?.url} className=\"w-100\" />\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","export const LIST_LIMIT = 5;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst client = new ApolloClient({\n  uri: 'https://graphqlzero.almansi.me/api',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}